<?xml version="1.0" encoding="UTF-8"?>
<web>

<limbo>
  <title>Nephila WEB Programming system for APL</title>
  <shorttitle>NEPHILA</shorttitle>
  <author>Aaron W. Hsu</author>
  <version>0.1</version>
  <copyright>
    <p>
      Copyright &copy; 2012 Aaron W. Hsu 
      <address> 
        &lt;<a href="mailto:arcfide@sacrideo.us">arcfide@sacrideo.us</a>&gr;
      </address>
    </p>
    <p>
      Permission to use, copy, modify, and distribute this software for any
      purpose with or without fee is hereby granted, provided that the above
      copyright notice and this permission notice appear in all copies.
    </p>
    <p>
      THE SOFTWARE IS PROVIDED <q>AS IS</q> AND THE AUTHOR DISCLAIMS ALL WARRANTIES
      WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
      MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
      ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
      WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
      ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
      OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
    </p>
  </copyright>
</limbo>

<titlepage />

<hsect strong="1" head="Introduction">
  <text>
    <p>
      This is Nephila, a new form of WEB programming designed specifically
      to innovate and move past the traditional WEB programming interfaces 
      without losing the important benefits that a full features WEB 
      system provides, including things like the typesetting of program 
      code and the sophisticated forms of cross-referencing that traditional
      WEB programming systems provide by default. It tries to leverage 
      existing and well founded technologies as well as improve the degree
      of integration possible for a web programming system. One of these 
      key changes is the use of XML as its programming syntax, rather than 
      some other ad hoc approach. This enables a number of third party tools, 
      including text editors and scripts, to work on the document natively, 
      with little to no actual modification necessary. This reduces the 
      large number of glue elements that would otherwise be necessary in 
      order to integrate traditional WEB syntaxes into the tools that modern 
      programmers use. Moreover, it provides a degree of flexibility in terms 
      of language and production target without limiting the power of 
      traditional WEB features, including the production of print quality 
      resources. 
    </p>
    <p>
      Currently, the Nephila system targets the APL programming language, 
      XHTML and TeX documentation languages, and uses its own XML schema 
      to wrap these two together. This program is written using the Dyalog 
      APL variant of the APL programming language.
    </p>
  </text>
  <aplexec>
    Version←0 1 ⋄ VersionString←'Version 0.1'
  </aplexec>
</hsect>

<hsect head="Parsing the syntax">
  <text>
    Parsing the XML syntax is easier given that we can work with the 
    <code>⎕XML</code> parser that we already have built into the Dyalog 
    APL system.
  </text>
  <apldef name="PARSE∆WEB">
    R←PARSE∆WEB FN;T
    T←FN ⎕NTIE 0 0
    R←'UTF-8' ⎕UCS ⎕UCS ⎕NREAD T,80,2↑⎕NSIZE T
    R←'whitespace' 'trim' ⎕XML R
    ⎕NUNTIE T
  </apldef>
</hsect>

<sect>
  <text>
    In our system, we have a global variable <code>NL</code>
    that represents the newline code for our XML system. 
    On UNIX machines this is the UCS value 133.
  </text>
  <aplexec>
    NL←⎕UCS 133
  </aplexec>
</sect>

<hsect head="Tangling WEBs">
  <text>
    The actual act of tangling is divided into the following basic 
    passes inside of our main tangling function, <code>TANGLA∆WEB</code>.
  </text>
  <apldef name="TANGLE∆WEB">
    TANGLE∆WEB FN;WEB;ROWS;<aplref name="Local variables for TANGLE∆WEB" />
    WEB←PARSE∆WEB FN ⋄ ROWS←⊃⍴WEB
    <aplref name="Extract code elements into &lt;code&gr;CODE&lt;code&gr;" />
    <aplref name="Sort code elements by name" />
    <aplref name="Concatenate like named code elements" />
    <aplref name="Substitute all code fragments" />
    <aplref name="Fix and execute all top-level code elements" />
  </apldef>
</hsect>

<sect>
  <text>
    <p>
      We have four different types of code elements in our program. The first 
      three&mdash;<code>apldef</code>, <code>aplfix</code>, 
      <code>aplexec</code>&mdash;all represent top-level elements.
      The last element, <code>aplfrg</code>, is the WEB fragment element that 
      allows us to lift code out of its computer order into something that is
      hopefully more natural to the human reader. The <code>aplexec</code>
      all of the top-level elements can be extended, as each one has a name 
      attribute. If two top-level elements with the same name attribute and the
      same element name (it is an error to use the same name value with 
      two different element names) occur, they are concatenated together. 
      The <code>aplexec</code> always has the same implicit name, and cannot 
      be changed. The only difference between these top-level elements and 
      the fragments is that fragments are only realized inside of the tangled 
      code when they are referenced by an <code>aplref</code> element that 
      occurs inside the body of one of the top-level code elements. Otherwise, 
      they work largely the same way as the normal elements do. 
    </p>
    <p>
      This leads us to the first pass of our tangle procedure, which extracts 
      out all of these code elements from the main web syntax, to be dealt 
      with separately. We extract these code elements into the 
      <code>CODE</code> variable. This structure is exactly the same as the 
      <code>WEB</code> structure except that all of the normal elements are 
      removed, and only the code elements are left as the top-level of nesting.
    </p>
  </text>
  <aplfrg name="Extract code elements into &lt;code&gr;CODE&lt;code&gr;">
    CENS←'apldef' 'aplfix' 'aplexec' 'aplfrg'
    CODE←(2≤WEB[;1])⌿WEB    ⍝ Only elements and children of the right nesting
    G←+\2=CODE[;1]          ⍝ Group IDs of elements 
    C←(∨⌿CENS∘.≡CODE[;2])/G ⍝ Group IDs for code elements
    CODE←(⊃C∨.=⊂G)⌿CODE     ⍝ Eliminate non-code groups
  </aplfrg>
</sect>

<sect>
  <aplfrg name="Local variables for TANGLE∆WEB">
    ;CENS;CODE;G;C
  </aplfrg>
</sect>

<sect>
  <text>
    Now that we have the code into its own set of stuff, we should sort
    the groups of code based on their names. This makes redundant some of 
    code elements so that we can remove them, and in essence, prepares our 
    <code>CODE</code> element for concatenation.
  </text>
  <aplfrg name="Sort code elements by name">
    
  </aplfrg>
</sect>

<sect>
  <aplfrg name="???">
    ENS←WEB[;2]
    (D F E)←{(ENS∊⊂⍵)/⍳⍴ENS}¨'apldef' 'aplfix' 'aplexec'
    DO←{0 &lt; ⍴⍵:⍺⍺{T←NL,⍵ ⋄ ⍺⍺ 1↓¨(NL=T)⊂T}¨WEB[⍵;3]}
    {⎕FX ↑⍵}DO D ⋄ ⎕FIX DO F ⋄ ⍎¨DO E
  </aplfrg>
</sect>

<hsect head="Weaving WEBs">
  <text>
    <p>
      There are two different weaving targets that we have. We can either
      WEAVE code to the \TeX\ backend or to the XHTML backend. In both cases, 
      the approach is similiar. Both the XHTML layout and the \TeX\ layout 
      use fairly linear approaches to laying out the document, so we can 
      just follow that.
    </p>
    <p>
      The <code>WEAVE∆WEB</code> function itself will eventually take a left
      argument indicating whether the output target is \TeX\ or XHTML or even 
      something else. At the moment, it only takes a right argument and it 
      will always output XHTML.
    </p>
  </text>
</hsect>

<hsect head="Using Nephila as an User Command">
  <text>
    Eventually I want to be able to use this program as an user command,
    but at the moment this is not possible. The structure and mechanism
    to turn this program into an user command program will be in here.
  </text>
</hsect>

<hsect head="Index">
  <index />
</hsect>

</web>
